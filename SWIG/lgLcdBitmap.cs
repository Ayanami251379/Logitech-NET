/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class lgLcdBitmap : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal lgLcdBitmap(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(lgLcdBitmap obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~lgLcdBitmap() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LogitechLCDPINVOKE.delete_lgLcdBitmap(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public lgLcdBitmapHeader hdr {
    set {
      LogitechLCDPINVOKE.lgLcdBitmap_hdr_set(swigCPtr, lgLcdBitmapHeader.getCPtr(value));
    } 
    get {
      IntPtr cPtr = LogitechLCDPINVOKE.lgLcdBitmap_hdr_get(swigCPtr);
      lgLcdBitmapHeader ret = (cPtr == IntPtr.Zero) ? null : new lgLcdBitmapHeader(cPtr, false);
      return ret;
    } 
  }

  public lgLcdBitmap160x43x1 bmp_mono {
    set {
      LogitechLCDPINVOKE.lgLcdBitmap_bmp_mono_set(swigCPtr, lgLcdBitmap160x43x1.getCPtr(value));
    } 
    get {
      IntPtr cPtr = LogitechLCDPINVOKE.lgLcdBitmap_bmp_mono_get(swigCPtr);
      lgLcdBitmap160x43x1 ret = (cPtr == IntPtr.Zero) ? null : new lgLcdBitmap160x43x1(cPtr, false);
      return ret;
    } 
  }

  public lgLcdBitmapQVGAx32 bmp_qvga32 {
    set {
      LogitechLCDPINVOKE.lgLcdBitmap_bmp_qvga32_set(swigCPtr, lgLcdBitmapQVGAx32.getCPtr(value));
    } 
    get {
      IntPtr cPtr = LogitechLCDPINVOKE.lgLcdBitmap_bmp_qvga32_get(swigCPtr);
      lgLcdBitmapQVGAx32 ret = (cPtr == IntPtr.Zero) ? null : new lgLcdBitmapQVGAx32(cPtr, false);
      return ret;
    } 
  }

  public lgLcdBitmap() : this(LogitechLCDPINVOKE.new_lgLcdBitmap(), true) {
  }

}
