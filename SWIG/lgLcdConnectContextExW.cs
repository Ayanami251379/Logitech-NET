/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class lgLcdConnectContextExW : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal lgLcdConnectContextExW(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(lgLcdConnectContextExW obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~lgLcdConnectContextExW() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LogitechLCDPINVOKE.delete_lgLcdConnectContextExW(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public SWIGTYPE_p_LPCWSTR appFriendlyName {
    set {
      LogitechLCDPINVOKE.lgLcdConnectContextExW_appFriendlyName_set(swigCPtr, SWIGTYPE_p_LPCWSTR.getCPtr(value));
      if (LogitechLCDPINVOKE.SWIGPendingException.Pending) throw LogitechLCDPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_LPCWSTR ret = new SWIGTYPE_p_LPCWSTR(LogitechLCDPINVOKE.lgLcdConnectContextExW_appFriendlyName_get(swigCPtr), true);
      if (LogitechLCDPINVOKE.SWIGPendingException.Pending) throw LogitechLCDPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int isPersistent {
    set {
      LogitechLCDPINVOKE.lgLcdConnectContextExW_isPersistent_set(swigCPtr, value);
    } 
    get {
      int ret = LogitechLCDPINVOKE.lgLcdConnectContextExW_isPersistent_get(swigCPtr);
      return ret;
    } 
  }

  public int isAutostartable {
    set {
      LogitechLCDPINVOKE.lgLcdConnectContextExW_isAutostartable_set(swigCPtr, value);
    } 
    get {
      int ret = LogitechLCDPINVOKE.lgLcdConnectContextExW_isAutostartable_get(swigCPtr);
      return ret;
    } 
  }

  public lgLcdConfigureContext onConfigure {
    set {
      LogitechLCDPINVOKE.lgLcdConnectContextExW_onConfigure_set(swigCPtr, lgLcdConfigureContext.getCPtr(value));
    } 
    get {
      IntPtr cPtr = LogitechLCDPINVOKE.lgLcdConnectContextExW_onConfigure_get(swigCPtr);
      lgLcdConfigureContext ret = (cPtr == IntPtr.Zero) ? null : new lgLcdConfigureContext(cPtr, false);
      return ret;
    } 
  }

  public int connection {
    set {
      LogitechLCDPINVOKE.lgLcdConnectContextExW_connection_set(swigCPtr, value);
    } 
    get {
      int ret = LogitechLCDPINVOKE.lgLcdConnectContextExW_connection_get(swigCPtr);
      return ret;
    } 
  }

  public uint dwAppletCapabilitiesSupported {
    set {
      LogitechLCDPINVOKE.lgLcdConnectContextExW_dwAppletCapabilitiesSupported_set(swigCPtr, value);
    } 
    get {
      uint ret = LogitechLCDPINVOKE.lgLcdConnectContextExW_dwAppletCapabilitiesSupported_get(swigCPtr);
      return ret;
    } 
  }

  public uint dwReserved1 {
    set {
      LogitechLCDPINVOKE.lgLcdConnectContextExW_dwReserved1_set(swigCPtr, value);
    } 
    get {
      uint ret = LogitechLCDPINVOKE.lgLcdConnectContextExW_dwReserved1_get(swigCPtr);
      return ret;
    } 
  }

  public lgLcdNotificationContext onNotify {
    set {
      LogitechLCDPINVOKE.lgLcdConnectContextExW_onNotify_set(swigCPtr, lgLcdNotificationContext.getCPtr(value));
    } 
    get {
      IntPtr cPtr = LogitechLCDPINVOKE.lgLcdConnectContextExW_onNotify_get(swigCPtr);
      lgLcdNotificationContext ret = (cPtr == IntPtr.Zero) ? null : new lgLcdNotificationContext(cPtr, false);
      return ret;
    } 
  }

  public lgLcdConnectContextExW() : this(LogitechLCDPINVOKE.new_lgLcdConnectContextExW(), true) {
  }

}
