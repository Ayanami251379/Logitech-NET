/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class lgLcdConnectContextA : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal lgLcdConnectContextA(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(lgLcdConnectContextA obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~lgLcdConnectContextA() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LogitechLCDPINVOKE.delete_lgLcdConnectContextA(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public string appFriendlyName {
    set {
      LogitechLCDPINVOKE.lgLcdConnectContextA_appFriendlyName_set(swigCPtr, value);
    } 
    get {
      string ret = LogitechLCDPINVOKE.lgLcdConnectContextA_appFriendlyName_get(swigCPtr);
      return ret;
    } 
  }

  public int isPersistent {
    set {
      LogitechLCDPINVOKE.lgLcdConnectContextA_isPersistent_set(swigCPtr, value);
    } 
    get {
      int ret = LogitechLCDPINVOKE.lgLcdConnectContextA_isPersistent_get(swigCPtr);
      return ret;
    } 
  }

  public int isAutostartable {
    set {
      LogitechLCDPINVOKE.lgLcdConnectContextA_isAutostartable_set(swigCPtr, value);
    } 
    get {
      int ret = LogitechLCDPINVOKE.lgLcdConnectContextA_isAutostartable_get(swigCPtr);
      return ret;
    } 
  }

  public lgLcdConfigureContext onConfigure {
    set {
      LogitechLCDPINVOKE.lgLcdConnectContextA_onConfigure_set(swigCPtr, lgLcdConfigureContext.getCPtr(value));
    } 
    get {
      IntPtr cPtr = LogitechLCDPINVOKE.lgLcdConnectContextA_onConfigure_get(swigCPtr);
      lgLcdConfigureContext ret = (cPtr == IntPtr.Zero) ? null : new lgLcdConfigureContext(cPtr, false);
      return ret;
    } 
  }

  public int connection {
    set {
      LogitechLCDPINVOKE.lgLcdConnectContextA_connection_set(swigCPtr, value);
    } 
    get {
      int ret = LogitechLCDPINVOKE.lgLcdConnectContextA_connection_get(swigCPtr);
      return ret;
    } 
  }

  public lgLcdConnectContextA() : this(LogitechLCDPINVOKE.new_lgLcdConnectContextA(), true) {
  }

}
