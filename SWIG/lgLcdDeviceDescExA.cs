/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class lgLcdDeviceDescExA : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal lgLcdDeviceDescExA(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(lgLcdDeviceDescExA obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~lgLcdDeviceDescExA() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LogitechLCDPINVOKE.delete_lgLcdDeviceDescExA(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public uint deviceFamilyId {
    set {
      LogitechLCDPINVOKE.lgLcdDeviceDescExA_deviceFamilyId_set(swigCPtr, value);
    } 
    get {
      uint ret = LogitechLCDPINVOKE.lgLcdDeviceDescExA_deviceFamilyId_get(swigCPtr);
      return ret;
    } 
  }

  public string deviceDisplayName {
    set {
      LogitechLCDPINVOKE.lgLcdDeviceDescExA_deviceDisplayName_set(swigCPtr, value);
    } 
    get {
      string ret = LogitechLCDPINVOKE.lgLcdDeviceDescExA_deviceDisplayName_get(swigCPtr);
      return ret;
    } 
  }

  public uint Width {
    set {
      LogitechLCDPINVOKE.lgLcdDeviceDescExA_Width_set(swigCPtr, value);
    } 
    get {
      uint ret = LogitechLCDPINVOKE.lgLcdDeviceDescExA_Width_get(swigCPtr);
      return ret;
    } 
  }

  public uint Height {
    set {
      LogitechLCDPINVOKE.lgLcdDeviceDescExA_Height_set(swigCPtr, value);
    } 
    get {
      uint ret = LogitechLCDPINVOKE.lgLcdDeviceDescExA_Height_get(swigCPtr);
      return ret;
    } 
  }

  public uint Bpp {
    set {
      LogitechLCDPINVOKE.lgLcdDeviceDescExA_Bpp_set(swigCPtr, value);
    } 
    get {
      uint ret = LogitechLCDPINVOKE.lgLcdDeviceDescExA_Bpp_get(swigCPtr);
      return ret;
    } 
  }

  public uint NumSoftButtons {
    set {
      LogitechLCDPINVOKE.lgLcdDeviceDescExA_NumSoftButtons_set(swigCPtr, value);
    } 
    get {
      uint ret = LogitechLCDPINVOKE.lgLcdDeviceDescExA_NumSoftButtons_get(swigCPtr);
      return ret;
    } 
  }

  public uint Reserved1 {
    set {
      LogitechLCDPINVOKE.lgLcdDeviceDescExA_Reserved1_set(swigCPtr, value);
    } 
    get {
      uint ret = LogitechLCDPINVOKE.lgLcdDeviceDescExA_Reserved1_get(swigCPtr);
      return ret;
    } 
  }

  public uint Reserved2 {
    set {
      LogitechLCDPINVOKE.lgLcdDeviceDescExA_Reserved2_set(swigCPtr, value);
    } 
    get {
      uint ret = LogitechLCDPINVOKE.lgLcdDeviceDescExA_Reserved2_get(swigCPtr);
      return ret;
    } 
  }

  public lgLcdDeviceDescExA() : this(LogitechLCDPINVOKE.new_lgLcdDeviceDescExA(), true) {
  }

}
